import time

import cv2
import numpy as np
import os
import matplotlib.pyplot as plt




def circle_bs(img,radius,centre):
    xcent, ycent = centre
    coords = []
    mfac=1

    for y in range(0,(radius*mfac)+1,2):
        y = y/mfac
        yp = y + ycent
        x = int(np.floor(((radius**2-(yp-ycent)**2))**0.5))
        iy = int(y)
        coords.append((x+xcent,iy+ycent))
        coords.append((x+xcent,-iy+ycent))
        coords.append((-x+xcent,iy+ycent))
        coords.append((-x+xcent,-iy+ycent))


    for element in list(coords):
        img[element] = 150

    return img

def color_determine(point,mask):
    _, radius = dist_determine(point, mask)
    if radius < 10:
        color = [255,0,0]
    elif (radius >= 10) & (radius <=20):
        color = [125,125,0]
    else:
        color = [0,255,0]
    return color,radius

def dist_determine(point,mask):
    xcent, ycent = point
    checkvar = 0
    mask = np.transpose(mask)
    for radius in range(1, 150, 2):
        rstep = int((radius)/2)

        # horizontal
        y = 0
        yp = y + ycent
        x = int(((radius ** 2 - (yp - ycent) ** 2)) ** 0.5)
        iy = int(y)

        if mask[(x + xcent, iy + ycent)] == checkvar:
            return (x + xcent, iy + ycent),radius
        if mask[(-x + xcent, iy + ycent)] == checkvar:
            return (-x + xcent, iy + ycent),radius

        # the vertical lines
        y = radius
        yp = y + ycent
        x = int(((radius ** 2 - (yp - ycent) ** 2)) ** 0.5)
        iy = int(y)
        if mask[(x + xcent, iy + ycent)] == checkvar:
            return (x + xcent, iy + ycent),radius
        if mask[(-x + xcent, -iy + ycent)] == checkvar:
            return (x + xcent, -iy + ycent),radius

        # upper diagonal
        y = rstep
        yp = y + ycent
        x = int(((radius ** 2 - (yp - ycent) ** 2)) ** 0.5)
        iy = int(y)

        if mask[(x + xcent, iy + ycent)] == checkvar:
            return (x + xcent, iy + ycent),radius

        if mask[(-x + xcent, iy + ycent)] == checkvar:
            return (-x + xcent, iy + ycent),radius

        if mask[(x + xcent, -iy + ycent)] == checkvar:
            return (x + xcent, -iy + ycent),radius

        if mask[(-x + xcent, -iy + ycent)] == checkvar:
            return (-x + xcent, -iy + ycent),radius


        # the lower diagonals
        y = int(radius-rstep*0.25)
        yp = y + ycent
        x = int(((radius ** 2 - (yp - ycent) ** 2)) ** 0.5)
        iy = int(y)

        if mask[(x + xcent, iy + ycent)] == checkvar:
            return (x + xcent, iy + ycent),radius

        if mask[(-x + xcent, iy + ycent)] == checkvar:
            return (-x + xcent, iy + ycent),radius

        if mask[(x + xcent, -iy + ycent)] == checkvar:
            return (x + xcent, -iy + ycent),radius

        if mask[(-x + xcent, -iy + ycent)] == checkvar:
            return (-x + xcent, -iy + ycent),radius

    return [],[]


def realtalk():
    myarray = np.array([[ 77,  88],
                        [ 79,  87],
                        [ 81,  86],
                        [ 84,  84],
                        [ 86,  83],
                        [ 89,  82],
                        [ 91,  81],
                        [ 94,  80],
                        [ 96,  80],
                        [ 99,  79],
                        [101,  78],
                        [104,  78],
                        [106,  77],
                        [109,  77],
                        [111,  76],
                        [114,  76],
                        [116,  76],
                        [119,  75],
                        [121,  75],
                        [124,  75],
                        [126,  75],
                        [129,  75],
                        [131,  75],
                        [134,  75],
                        [136,  75],
                        [139,  75],
                        [141,  76],
                        [144,  76],
                        [146,  76],
                        [149,  76],
                        [151,  76],
                        [154,  77],
                        [156,  77],
                        [159,  77],
                        [161,  78],
                        [164,  78],
                        [166,  79],
                        [169,  79],
                        [171,  80],
                        [174,  80],
                        [176,  81],
                        [179,  81],
                        [181,  82],
                        [184,  82],
                        [186,  83],
                        [189,  83],
                        [191,  84],
                        [194,  84],
                        [196,  85],
                        [199,  85],
                        [201,  86],
                        [204,  86],
                        [206,  87],
                        [209,  87],
                        [211,  88],
                        [214,  88],
                        [216,  89],
                        [219,  89],
                        [221,  90],
                        [224,  91]])

    mask = np.loadtxt('/home/jelle/PycharmProjects/UTMR/mask.txt')
    mask = cv2.rotate(mask,cv2.ROTATE_90_COUNTERCLOCKWISE)
    drawfun = np.copy(mask)
    radiuslist = []

    # square making function


    for centre in myarray:
        Y,X = centre
        # found_wall = False
        # drawfun = cv2.circle(drawfun, (y, x), 3, 0)
        # size = 1
        # print(x,y)
        # while found_wall is False:
        #     sq_coords = drawsquare(size,(x,y))
        #     size += 1
        #     for X,Y in sq_coords:
        #         #print(mask[X,Y])
        #         if mask[X,Y] == 0.0:
        #             #print("hi")
        #             found_wall = True
        #             cv2.line(drawfun,(y,x),(Y,X),150,1)
        #             cv2.circle(drawfun,(0,0),4,)

        (y,x),radius = dist_determine(centre, mask)
        radiuslist.append(radius)
        cv2.line(drawfun,(y,x),(Y,X),150,1)
        cv2.circle(drawfun,(0,0),4,255)

    plt.imshow(drawfun)
    plt.show()

realtalk()

# centre = (200, 200)
# a = np.zeros((400, 400))
# ab = []
#
# for _ in range(100):
#     ab.append(crazyfun(centre, a))
#
# print(np.mean(ab))
#0.028s
#0.0007